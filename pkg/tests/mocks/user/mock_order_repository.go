// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/order.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "project/pkg/utils/domain"
	models "project/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrderProducts mocks base method.
func (m *MockOrderRepository) AddOrderProducts(orderID int, cart []models.GetCart) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderProducts", orderID, cart)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrderProducts indicates an expected call of AddOrderProducts.
func (mr *MockOrderRepositoryMockRecorder) AddOrderProducts(orderID, cart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderProducts", reflect.TypeOf((*MockOrderRepository)(nil).AddOrderProducts), orderID, cart)
}

// CancelOrder mocks base method.
func (m *MockOrderRepository) CancelOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrder), orderID)
}

// CheckIndividualOrders mocks base method.
func (m *MockOrderRepository) CheckIndividualOrders(orderID, pID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIndividualOrders", orderID, pID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIndividualOrders indicates an expected call of CheckIndividualOrders.
func (mr *MockOrderRepositoryMockRecorder) CheckIndividualOrders(orderID, pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIndividualOrders", reflect.TypeOf((*MockOrderRepository)(nil).CheckIndividualOrders), orderID, pID)
}

// CheckOrderByID mocks base method.
func (m *MockOrderRepository) CheckOrderByID(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderByID", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckOrderByID indicates an expected call of CheckOrderByID.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderByID", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderByID), orderID)
}

// CheckOrderStatusByID mocks base method.
func (m *MockOrderRepository) CheckOrderStatusByID(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderStatusByID", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderStatusByID indicates an expected call of CheckOrderStatusByID.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderStatusByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderStatusByID", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderStatusByID), orderID)
}

// DeleteProductInOrder mocks base method.
func (m *MockOrderRepository) DeleteProductInOrder(orderID, pID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductInOrder", orderID, pID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteProductInOrder indicates an expected call of DeleteProductInOrder.
func (mr *MockOrderRepositoryMockRecorder) DeleteProductInOrder(orderID, pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductInOrder", reflect.TypeOf((*MockOrderRepository)(nil).DeleteProductInOrder), orderID, pID)
}

// EditOrderStatus mocks base method.
func (m *MockOrderRepository) EditOrderStatus(order int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrderStatus", order, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrderStatus indicates an expected call of EditOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) EditOrderStatus(order, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).EditOrderStatus), order, status)
}

// FindOrderAmount mocks base method.
func (m *MockOrderRepository) FindOrderAmount(orderID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderAmount", orderID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderAmount indicates an expected call of FindOrderAmount.
func (mr *MockOrderRepositoryMockRecorder) FindOrderAmount(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderAmount", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderAmount), orderID)
}

// FindOrderedUserID mocks base method.
func (m *MockOrderRepository) FindOrderedUserID(orderID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderedUserID", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderedUserID indicates an expected call of FindOrderedUserID.
func (mr *MockOrderRepositoryMockRecorder) FindOrderedUserID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderedUserID", reflect.TypeOf((*MockOrderRepository)(nil).FindOrderedUserID), orderID)
}

// GetAllOrderItemsByOrderID mocks base method.
func (m *MockOrderRepository) GetAllOrderItemsByOrderID(orderID int) ([]domain.EachProductOrderDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderItemsByOrderID", orderID)
	ret0, _ := ret[0].([]domain.EachProductOrderDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderItemsByOrderID indicates an expected call of GetAllOrderItemsByOrderID.
func (mr *MockOrderRepositoryMockRecorder) GetAllOrderItemsByOrderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderItemsByOrderID", reflect.TypeOf((*MockOrderRepository)(nil).GetAllOrderItemsByOrderID), orderID)
}

// GetOrderAddress mocks base method.
func (m *MockOrderRepository) GetOrderAddress(orderID int) (domain.Address, models.OrderData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAddress", orderID)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(models.OrderData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderAddress indicates an expected call of GetOrderAddress.
func (mr *MockOrderRepositoryMockRecorder) GetOrderAddress(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAddress", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderAddress), orderID)
}

// GetOrderImages mocks base method.
func (m *MockOrderRepository) GetOrderImages(orderID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderImages", orderID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderImages indicates an expected call of GetOrderImages.
func (mr *MockOrderRepositoryMockRecorder) GetOrderImages(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderImages", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderImages), orderID)
}

// GetOrderProductIDs mocks base method.
func (m *MockOrderRepository) GetOrderProductIDs(orderID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderProductIDs", orderID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderProductIDs indicates an expected call of GetOrderProductIDs.
func (mr *MockOrderRepositoryMockRecorder) GetOrderProductIDs(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderProductIDs", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderProductIDs), orderID)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(userID int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", userID)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), userID)
}

// GetPaymentMethodsByID mocks base method.
func (m *MockOrderRepository) GetPaymentMethodsByID(PaymentMethodID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentMethodsByID", PaymentMethodID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentMethodsByID indicates an expected call of GetPaymentMethodsByID.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentMethodsByID(PaymentMethodID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentMethodsByID", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentMethodsByID), PaymentMethodID)
}

// GetPaymentStatusByID mocks base method.
func (m *MockOrderRepository) GetPaymentStatusByID(orderID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentStatusByID", orderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentStatusByID indicates an expected call of GetPaymentStatusByID.
func (mr *MockOrderRepositoryMockRecorder) GetPaymentStatusByID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentStatusByID", reflect.TypeOf((*MockOrderRepository)(nil).GetPaymentStatusByID), orderID)
}

// OrderItems mocks base method.
func (m *MockOrderRepository) OrderItems(userID, address, paymentID, couponID int, TotalCartPrice float64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderItems", userID, address, paymentID, couponID, TotalCartPrice)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderItems indicates an expected call of OrderItems.
func (mr *MockOrderRepositoryMockRecorder) OrderItems(userID, address, paymentID, couponID, TotalCartPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderItems", reflect.TypeOf((*MockOrderRepository)(nil).OrderItems), userID, address, paymentID, couponID, TotalCartPrice)
}

// ReturnOrder mocks base method.
func (m *MockOrderRepository) ReturnOrder(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnOrder", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnOrder indicates an expected call of ReturnOrder.
func (mr *MockOrderRepositoryMockRecorder) ReturnOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnOrder", reflect.TypeOf((*MockOrderRepository)(nil).ReturnOrder), orderID)
}

// UpdateFinalOrderPrice mocks base method.
func (m *MockOrderRepository) UpdateFinalOrderPrice(orderID int, NewPrice float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFinalOrderPrice", orderID, NewPrice)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFinalOrderPrice indicates an expected call of UpdateFinalOrderPrice.
func (mr *MockOrderRepositoryMockRecorder) UpdateFinalOrderPrice(orderID, NewPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFinalOrderPrice", reflect.TypeOf((*MockOrderRepository)(nil).UpdateFinalOrderPrice), orderID, NewPrice)
}
