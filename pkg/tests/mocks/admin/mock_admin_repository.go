// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/admin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "github.com/MohdAhzan/Uniclub_ecommerce_Cleanarchitecture_Project/pkg/utils/domain"
	models "github.com/MohdAhzan/Uniclub_ecommerce_Cleanarchitecture_Project/pkg/utils/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// AddNewPaymentMethod mocks base method.
func (m *MockAdminRepository) AddNewPaymentMethod(pMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewPaymentMethod", pMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewPaymentMethod indicates an expected call of AddNewPaymentMethod.
func (mr *MockAdminRepositoryMockRecorder) AddNewPaymentMethod(pMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewPaymentMethod", reflect.TypeOf((*MockAdminRepository)(nil).AddNewPaymentMethod), pMethod)
}

// DeletePaymentMethod mocks base method.
func (m *MockAdminRepository) DeletePaymentMethod(paymentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethod", paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentMethod indicates an expected call of DeletePaymentMethod.
func (mr *MockAdminRepositoryMockRecorder) DeletePaymentMethod(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethod", reflect.TypeOf((*MockAdminRepository)(nil).DeletePaymentMethod), paymentID)
}

// FilteredSalesReport mocks base method.
func (m *MockAdminRepository) FilteredSalesReport(startTime, endTime time.Time) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilteredSalesReport", startTime, endTime)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilteredSalesReport indicates an expected call of FilteredSalesReport.
func (mr *MockAdminRepositoryMockRecorder) FilteredSalesReport(startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilteredSalesReport", reflect.TypeOf((*MockAdminRepository)(nil).FilteredSalesReport), startTime, endTime)
}

// GetAdminHashPassword mocks base method.
func (m *MockAdminRepository) GetAdminHashPassword(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminHashPassword", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminHashPassword indicates an expected call of GetAdminHashPassword.
func (mr *MockAdminRepositoryMockRecorder) GetAdminHashPassword(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminHashPassword", reflect.TypeOf((*MockAdminRepository)(nil).GetAdminHashPassword), id)
}

// GetAllOrderDetailsByStatus mocks base method.
func (m *MockAdminRepository) GetAllOrderDetailsByStatus() (domain.AdminOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderDetailsByStatus")
	ret0, _ := ret[0].(domain.AdminOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderDetailsByStatus indicates an expected call of GetAllOrderDetailsByStatus.
func (mr *MockAdminRepositoryMockRecorder) GetAllOrderDetailsByStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderDetailsByStatus", reflect.TypeOf((*MockAdminRepository)(nil).GetAllOrderDetailsByStatus))
}

// GetAllPaymentMethods mocks base method.
func (m *MockAdminRepository) GetAllPaymentMethods() ([]models.GetPaymentMethods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentMethods")
	ret0, _ := ret[0].([]models.GetPaymentMethods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentMethods indicates an expected call of GetAllPaymentMethods.
func (mr *MockAdminRepositoryMockRecorder) GetAllPaymentMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentMethods", reflect.TypeOf((*MockAdminRepository)(nil).GetAllPaymentMethods))
}

// GetUserByID mocks base method.
func (m *MockAdminRepository) GetUserByID(id int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockAdminRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockAdminRepository)(nil).GetUserByID), id)
}

// GetUserIDbyorderID mocks base method.
func (m *MockAdminRepository) GetUserIDbyorderID(orderID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDbyorderID", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDbyorderID indicates an expected call of GetUserIDbyorderID.
func (mr *MockAdminRepositoryMockRecorder) GetUserIDbyorderID(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDbyorderID", reflect.TypeOf((*MockAdminRepository)(nil).GetUserIDbyorderID), orderID)
}

// GetUsers mocks base method.
func (m *MockAdminRepository) GetUsers() ([]models.UserDetailsAtAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]models.UserDetailsAtAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminRepository)(nil).GetUsers))
}

// LoginHandler mocks base method.
func (m *MockAdminRepository) LoginHandler(adminDetails models.AdminLogin) (domain.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", adminDetails)
	ret0, _ := ret[0].(domain.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockAdminRepositoryMockRecorder) LoginHandler(adminDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockAdminRepository)(nil).LoginHandler), adminDetails)
}

// MakePaymentStatusAsPaid mocks base method.
func (m *MockAdminRepository) MakePaymentStatusAsPaid(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePaymentStatusAsPaid", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePaymentStatusAsPaid indicates an expected call of MakePaymentStatusAsPaid.
func (mr *MockAdminRepositoryMockRecorder) MakePaymentStatusAsPaid(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePaymentStatusAsPaid", reflect.TypeOf((*MockAdminRepository)(nil).MakePaymentStatusAsPaid), orderID)
}

// OrderReturnApprove mocks base method.
func (m *MockAdminRepository) OrderReturnApprove(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReturnApprove", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderReturnApprove indicates an expected call of OrderReturnApprove.
func (mr *MockAdminRepositoryMockRecorder) OrderReturnApprove(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReturnApprove", reflect.TypeOf((*MockAdminRepository)(nil).OrderReturnApprove), orderID)
}

// SalesByDay mocks base method.
func (m *MockAdminRepository) SalesByDay(yearInt, monthInt, dayInt int) ([]models.OrderDetailsAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesByDay", yearInt, monthInt, dayInt)
	ret0, _ := ret[0].([]models.OrderDetailsAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesByDay indicates an expected call of SalesByDay.
func (mr *MockAdminRepositoryMockRecorder) SalesByDay(yearInt, monthInt, dayInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesByDay", reflect.TypeOf((*MockAdminRepository)(nil).SalesByDay), yearInt, monthInt, dayInt)
}

// SalesByMonth mocks base method.
func (m *MockAdminRepository) SalesByMonth(yearInt, monthInt int) ([]models.OrderDetailsAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesByMonth", yearInt, monthInt)
	ret0, _ := ret[0].([]models.OrderDetailsAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesByMonth indicates an expected call of SalesByMonth.
func (mr *MockAdminRepositoryMockRecorder) SalesByMonth(yearInt, monthInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesByMonth", reflect.TypeOf((*MockAdminRepository)(nil).SalesByMonth), yearInt, monthInt)
}

// SalesByYear mocks base method.
func (m *MockAdminRepository) SalesByYear(yearInt int) ([]models.OrderDetailsAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesByYear", yearInt)
	ret0, _ := ret[0].([]models.OrderDetailsAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesByYear indicates an expected call of SalesByYear.
func (mr *MockAdminRepositoryMockRecorder) SalesByYear(yearInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesByYear", reflect.TypeOf((*MockAdminRepository)(nil).SalesByYear), yearInt)
}

// UpdateAdminPass mocks base method.
func (m *MockAdminRepository) UpdateAdminPass(id int, NewPass string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdminPass", id, NewPass)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAdminPass indicates an expected call of UpdateAdminPass.
func (mr *MockAdminRepositoryMockRecorder) UpdateAdminPass(id, NewPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdminPass", reflect.TypeOf((*MockAdminRepository)(nil).UpdateAdminPass), id, NewPass)
}

// UpdateBlockUserByID mocks base method.
func (m *MockAdminRepository) UpdateBlockUserByID(user domain.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockUserByID", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockUserByID indicates an expected call of UpdateBlockUserByID.
func (mr *MockAdminRepositoryMockRecorder) UpdateBlockUserByID(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockUserByID", reflect.TypeOf((*MockAdminRepository)(nil).UpdateBlockUserByID), user)
}
