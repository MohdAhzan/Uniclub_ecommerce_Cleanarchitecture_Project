// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/usecase/interface/admin.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "github.com/MohdAhzan/Uniclub_ecommerce_Cleanarchitecture_Project/pkg/utils/domain"
	models "github.com/MohdAhzan/Uniclub_ecommerce_Cleanarchitecture_Project/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gofpdf "github.com/jung-kurt/gofpdf"
)

// MockAdminUseCase is a mock of AdminUseCase interface.
type MockAdminUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUseCaseMockRecorder
}

// MockAdminUseCaseMockRecorder is the mock recorder for MockAdminUseCase.
type MockAdminUseCaseMockRecorder struct {
	mock *MockAdminUseCase
}

// NewMockAdminUseCase creates a new mock instance.
func NewMockAdminUseCase(ctrl *gomock.Controller) *MockAdminUseCase {
	mock := &MockAdminUseCase{ctrl: ctrl}
	mock.recorder = &MockAdminUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUseCase) EXPECT() *MockAdminUseCaseMockRecorder {
	return m.recorder
}

// BlockUser mocks base method.
func (m *MockAdminUseCase) BlockUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockAdminUseCaseMockRecorder) BlockUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockAdminUseCase)(nil).BlockUser), id)
}

// ChangePassword mocks base method.
func (m *MockAdminUseCase) ChangePassword(passChange models.AdminPasswordChange, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", passChange, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAdminUseCaseMockRecorder) ChangePassword(passChange, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAdminUseCase)(nil).ChangePassword), passChange, id)
}

// DeletePaymentMethod mocks base method.
func (m *MockAdminUseCase) DeletePaymentMethod(paymentID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePaymentMethod", paymentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePaymentMethod indicates an expected call of DeletePaymentMethod.
func (mr *MockAdminUseCaseMockRecorder) DeletePaymentMethod(paymentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePaymentMethod", reflect.TypeOf((*MockAdminUseCase)(nil).DeletePaymentMethod), paymentID)
}

// EditOrderStatus mocks base method.
func (m *MockAdminUseCase) EditOrderStatus(orderID int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditOrderStatus", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditOrderStatus indicates an expected call of EditOrderStatus.
func (mr *MockAdminUseCaseMockRecorder) EditOrderStatus(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditOrderStatus", reflect.TypeOf((*MockAdminUseCase)(nil).EditOrderStatus), orderID, status)
}

// FilteredSalesReport mocks base method.
func (m *MockAdminUseCase) FilteredSalesReport(timePeriod string) (models.SalesReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilteredSalesReport", timePeriod)
	ret0, _ := ret[0].(models.SalesReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilteredSalesReport indicates an expected call of FilteredSalesReport.
func (mr *MockAdminUseCaseMockRecorder) FilteredSalesReport(timePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilteredSalesReport", reflect.TypeOf((*MockAdminUseCase)(nil).FilteredSalesReport), timePeriod)
}

// GetAllOrderDetails mocks base method.
func (m *MockAdminUseCase) GetAllOrderDetails() (domain.AdminOrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrderDetails")
	ret0, _ := ret[0].(domain.AdminOrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrderDetails indicates an expected call of GetAllOrderDetails.
func (mr *MockAdminUseCaseMockRecorder) GetAllOrderDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrderDetails", reflect.TypeOf((*MockAdminUseCase)(nil).GetAllOrderDetails))
}

// GetAllPaymentMethods mocks base method.
func (m *MockAdminUseCase) GetAllPaymentMethods() ([]models.GetPaymentMethods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentMethods")
	ret0, _ := ret[0].([]models.GetPaymentMethods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentMethods indicates an expected call of GetAllPaymentMethods.
func (mr *MockAdminUseCaseMockRecorder) GetAllPaymentMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentMethods", reflect.TypeOf((*MockAdminUseCase)(nil).GetAllPaymentMethods))
}

// GetUsers mocks base method.
func (m *MockAdminUseCase) GetUsers() ([]models.UserDetailsAtAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]models.UserDetailsAtAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAdminUseCaseMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAdminUseCase)(nil).GetUsers))
}

// LoginHandler mocks base method.
func (m *MockAdminUseCase) LoginHandler(adminDetails models.AdminLogin) (domain.TokenAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", adminDetails)
	ret0, _ := ret[0].(domain.TokenAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockAdminUseCaseMockRecorder) LoginHandler(adminDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockAdminUseCase)(nil).LoginHandler), adminDetails)
}

// MakePaymentStatusAsPaid mocks base method.
func (m *MockAdminUseCase) MakePaymentStatusAsPaid(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePaymentStatusAsPaid", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePaymentStatusAsPaid indicates an expected call of MakePaymentStatusAsPaid.
func (mr *MockAdminUseCaseMockRecorder) MakePaymentStatusAsPaid(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePaymentStatusAsPaid", reflect.TypeOf((*MockAdminUseCase)(nil).MakePaymentStatusAsPaid), orderID)
}

// NewPaymentMethod mocks base method.
func (m *MockAdminUseCase) NewPaymentMethod(pMethod string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPaymentMethod", pMethod)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewPaymentMethod indicates an expected call of NewPaymentMethod.
func (mr *MockAdminUseCaseMockRecorder) NewPaymentMethod(pMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPaymentMethod", reflect.TypeOf((*MockAdminUseCase)(nil).NewPaymentMethod), pMethod)
}

// OrderReturnApprove mocks base method.
func (m *MockAdminUseCase) OrderReturnApprove(orderID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReturnApprove", orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderReturnApprove indicates an expected call of OrderReturnApprove.
func (mr *MockAdminUseCaseMockRecorder) OrderReturnApprove(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReturnApprove", reflect.TypeOf((*MockAdminUseCase)(nil).OrderReturnApprove), orderID)
}

// PrintSalesReport mocks base method.
func (m *MockAdminUseCase) PrintSalesReport(sales []models.OrderDetailsAdmin) (*gofpdf.Fpdf, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrintSalesReport", sales)
	ret0, _ := ret[0].(*gofpdf.Fpdf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrintSalesReport indicates an expected call of PrintSalesReport.
func (mr *MockAdminUseCaseMockRecorder) PrintSalesReport(sales interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintSalesReport", reflect.TypeOf((*MockAdminUseCase)(nil).PrintSalesReport), sales)
}

// SalesByDate mocks base method.
func (m *MockAdminUseCase) SalesByDate(dayInt, monthInt, yearInt int) ([]models.OrderDetailsAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SalesByDate", dayInt, monthInt, yearInt)
	ret0, _ := ret[0].([]models.OrderDetailsAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SalesByDate indicates an expected call of SalesByDate.
func (mr *MockAdminUseCaseMockRecorder) SalesByDate(dayInt, monthInt, yearInt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SalesByDate", reflect.TypeOf((*MockAdminUseCase)(nil).SalesByDate), dayInt, monthInt, yearInt)
}

// UnBlockUser mocks base method.
func (m *MockAdminUseCase) UnBlockUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnBlockUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnBlockUser indicates an expected call of UnBlockUser.
func (mr *MockAdminUseCaseMockRecorder) UnBlockUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnBlockUser", reflect.TypeOf((*MockAdminUseCase)(nil).UnBlockUser), id)
}
