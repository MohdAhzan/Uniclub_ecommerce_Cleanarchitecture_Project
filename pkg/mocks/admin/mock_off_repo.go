// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/offer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "project/pkg/utils/domain"
	models "project/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOfferRepository is a mock of OfferRepository interface.
type MockOfferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfferRepositoryMockRecorder
}

// MockOfferRepositoryMockRecorder is the mock recorder for MockOfferRepository.
type MockOfferRepositoryMockRecorder struct {
	mock *MockOfferRepository
}

// NewMockOfferRepository creates a new mock instance.
func NewMockOfferRepository(ctrl *gomock.Controller) *MockOfferRepository {
	mock := &MockOfferRepository{ctrl: ctrl}
	mock.recorder = &MockOfferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferRepository) EXPECT() *MockOfferRepositoryMockRecorder {
	return m.recorder
}

// AddNewCategoryOffer mocks base method.
func (m *MockOfferRepository) AddNewCategoryOffer(model models.AddCategoryOffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewCategoryOffer", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewCategoryOffer indicates an expected call of AddNewCategoryOffer.
func (mr *MockOfferRepositoryMockRecorder) AddNewCategoryOffer(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewCategoryOffer", reflect.TypeOf((*MockOfferRepository)(nil).AddNewCategoryOffer), model)
}

// AddNewInventoryOffer mocks base method.
func (m *MockOfferRepository) AddNewInventoryOffer(model models.AddInventoryOffer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewInventoryOffer", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewInventoryOffer indicates an expected call of AddNewInventoryOffer.
func (mr *MockOfferRepositoryMockRecorder) AddNewInventoryOffer(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewInventoryOffer", reflect.TypeOf((*MockOfferRepository)(nil).AddNewInventoryOffer), model)
}

// CheckCategoryOfferExist mocks base method.
func (m *MockOfferRepository) CheckCategoryOfferExist(categoryID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCategoryOfferExist", categoryID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCategoryOfferExist indicates an expected call of CheckCategoryOfferExist.
func (mr *MockOfferRepositoryMockRecorder) CheckCategoryOfferExist(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCategoryOfferExist", reflect.TypeOf((*MockOfferRepository)(nil).CheckCategoryOfferExist), categoryID)
}

// CheckCategoryOfferStatus mocks base method.
func (m *MockOfferRepository) CheckCategoryOfferStatus(cID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCategoryOfferStatus", cID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCategoryOfferStatus indicates an expected call of CheckCategoryOfferStatus.
func (mr *MockOfferRepositoryMockRecorder) CheckCategoryOfferStatus(cID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCategoryOfferStatus", reflect.TypeOf((*MockOfferRepository)(nil).CheckCategoryOfferStatus), cID)
}

// CheckInventoryOfferExist mocks base method.
func (m *MockOfferRepository) CheckInventoryOfferExist(InventoryID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInventoryOfferExist", InventoryID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInventoryOfferExist indicates an expected call of CheckInventoryOfferExist.
func (mr *MockOfferRepositoryMockRecorder) CheckInventoryOfferExist(InventoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInventoryOfferExist", reflect.TypeOf((*MockOfferRepository)(nil).CheckInventoryOfferExist), InventoryID)
}

// CheckInventoryOfferStatus mocks base method.
func (m *MockOfferRepository) CheckInventoryOfferStatus(inventoryID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInventoryOfferStatus", inventoryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInventoryOfferStatus indicates an expected call of CheckInventoryOfferStatus.
func (mr *MockOfferRepositoryMockRecorder) CheckInventoryOfferStatus(inventoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInventoryOfferStatus", reflect.TypeOf((*MockOfferRepository)(nil).CheckInventoryOfferStatus), inventoryID)
}

// EditCategoryOffer mocks base method.
func (m *MockOfferRepository) EditCategoryOffer(newDiscount float64, cID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCategoryOffer", newDiscount, cID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCategoryOffer indicates an expected call of EditCategoryOffer.
func (mr *MockOfferRepositoryMockRecorder) EditCategoryOffer(newDiscount, cID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCategoryOffer", reflect.TypeOf((*MockOfferRepository)(nil).EditCategoryOffer), newDiscount, cID)
}

// EditInventoryOffer mocks base method.
func (m *MockOfferRepository) EditInventoryOffer(newDiscount float64, InventoryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditInventoryOffer", newDiscount, InventoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditInventoryOffer indicates an expected call of EditInventoryOffer.
func (mr *MockOfferRepositoryMockRecorder) EditInventoryOffer(newDiscount, InventoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditInventoryOffer", reflect.TypeOf((*MockOfferRepository)(nil).EditInventoryOffer), newDiscount, InventoryID)
}

// GetAllCategoryOffers mocks base method.
func (m *MockOfferRepository) GetAllCategoryOffers() ([]domain.CategoryOffers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCategoryOffers")
	ret0, _ := ret[0].([]domain.CategoryOffers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCategoryOffers indicates an expected call of GetAllCategoryOffers.
func (mr *MockOfferRepositoryMockRecorder) GetAllCategoryOffers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCategoryOffers", reflect.TypeOf((*MockOfferRepository)(nil).GetAllCategoryOffers))
}

// GetCategoryOfferDiscountPercentage mocks base method.
func (m *MockOfferRepository) GetCategoryOfferDiscountPercentage(CategoryID int) (float64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategoryOfferDiscountPercentage", CategoryID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCategoryOfferDiscountPercentage indicates an expected call of GetCategoryOfferDiscountPercentage.
func (mr *MockOfferRepositoryMockRecorder) GetCategoryOfferDiscountPercentage(CategoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategoryOfferDiscountPercentage", reflect.TypeOf((*MockOfferRepository)(nil).GetCategoryOfferDiscountPercentage), CategoryID)
}

// GetInventoryOfferDiscountPercentage mocks base method.
func (m *MockOfferRepository) GetInventoryOfferDiscountPercentage(InventoryId int) (float64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryOfferDiscountPercentage", InventoryId)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInventoryOfferDiscountPercentage indicates an expected call of GetInventoryOfferDiscountPercentage.
func (mr *MockOfferRepositoryMockRecorder) GetInventoryOfferDiscountPercentage(InventoryId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryOfferDiscountPercentage", reflect.TypeOf((*MockOfferRepository)(nil).GetInventoryOfferDiscountPercentage), InventoryId)
}

// GetInventoryOffers mocks base method.
func (m *MockOfferRepository) GetInventoryOffers() ([]models.GetInventoryOffers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventoryOffers")
	ret0, _ := ret[0].([]models.GetInventoryOffers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventoryOffers indicates an expected call of GetInventoryOffers.
func (mr *MockOfferRepositoryMockRecorder) GetInventoryOffers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventoryOffers", reflect.TypeOf((*MockOfferRepository)(nil).GetInventoryOffers))
}

// ValidorInvalidCategoryOffers mocks base method.
func (m *MockOfferRepository) ValidorInvalidCategoryOffers(status bool, CID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidorInvalidCategoryOffers", status, CID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidorInvalidCategoryOffers indicates an expected call of ValidorInvalidCategoryOffers.
func (mr *MockOfferRepositoryMockRecorder) ValidorInvalidCategoryOffers(status, CID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidorInvalidCategoryOffers", reflect.TypeOf((*MockOfferRepository)(nil).ValidorInvalidCategoryOffers), status, CID)
}

// ValidorInvalidInventoryOffers mocks base method.
func (m *MockOfferRepository) ValidorInvalidInventoryOffers(status bool, InventoryID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidorInvalidInventoryOffers", status, InventoryID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidorInvalidInventoryOffers indicates an expected call of ValidorInvalidInventoryOffers.
func (mr *MockOfferRepositoryMockRecorder) ValidorInvalidInventoryOffers(status, InventoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidorInvalidInventoryOffers", reflect.TypeOf((*MockOfferRepository)(nil).ValidorInvalidInventoryOffers), status, InventoryID)
}
