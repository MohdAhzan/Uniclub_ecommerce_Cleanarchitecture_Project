// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/helper/interface/helper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	models "project/pkg/utils/models"
	reflect "reflect"
	time "time"

	excelize "github.com/360EntSecGroup-Skylar/excelize"
	gomock "github.com/golang/mock/gomock"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// AddImageToAwsS3 mocks base method.
func (m *MockHelper) AddImageToAwsS3(file *multipart.FileHeader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddImageToAwsS3", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddImageToAwsS3 indicates an expected call of AddImageToAwsS3.
func (mr *MockHelperMockRecorder) AddImageToAwsS3(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImageToAwsS3", reflect.TypeOf((*MockHelper)(nil).AddImageToAwsS3), file)
}

// CompareHashAndPassword mocks base method.
func (m *MockHelper) CompareHashAndPassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHashAndPassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHashAndPassword indicates an expected call of CompareHashAndPassword.
func (mr *MockHelperMockRecorder) CompareHashAndPassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHashAndPassword", reflect.TypeOf((*MockHelper)(nil).CompareHashAndPassword), hashedPassword, password)
}

// ConvertToExel mocks base method.
func (m *MockHelper) ConvertToExel(sales []models.OrderDetailsAdmin) (*excelize.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertToExel", sales)
	ret0, _ := ret[0].(*excelize.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertToExel indicates an expected call of ConvertToExel.
func (mr *MockHelperMockRecorder) ConvertToExel(sales interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertToExel", reflect.TypeOf((*MockHelper)(nil).ConvertToExel), sales)
}

// GenerateReferralCode mocks base method.
func (m *MockHelper) GenerateReferralCode() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateReferralCode")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateReferralCode indicates an expected call of GenerateReferralCode.
func (mr *MockHelperMockRecorder) GenerateReferralCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateReferralCode", reflect.TypeOf((*MockHelper)(nil).GenerateReferralCode))
}

// GenerateTokenAdmin mocks base method.
func (m *MockHelper) GenerateTokenAdmin(admin models.AdminDetailsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenAdmin", admin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenAdmin indicates an expected call of GenerateTokenAdmin.
func (mr *MockHelperMockRecorder) GenerateTokenAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenAdmin", reflect.TypeOf((*MockHelper)(nil).GenerateTokenAdmin), admin)
}

// GenerateTokenClients mocks base method.
func (m *MockHelper) GenerateTokenClients(user models.UserDetailsResponse) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokenClients", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokenClients indicates an expected call of GenerateTokenClients.
func (mr *MockHelperMockRecorder) GenerateTokenClients(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokenClients", reflect.TypeOf((*MockHelper)(nil).GenerateTokenClients), user)
}

// GetTimeFromPeriod mocks base method.
func (m *MockHelper) GetTimeFromPeriod(timePeriod string) (time.Time, time.Time) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeFromPeriod", timePeriod)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(time.Time)
	return ret0, ret1
}

// GetTimeFromPeriod indicates an expected call of GetTimeFromPeriod.
func (mr *MockHelperMockRecorder) GetTimeFromPeriod(timePeriod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeFromPeriod", reflect.TypeOf((*MockHelper)(nil).GetTimeFromPeriod), timePeriod)
}

// PasswordHashing mocks base method.
func (m *MockHelper) PasswordHashing(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PasswordHashing", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PasswordHashing indicates an expected call of PasswordHashing.
func (mr *MockHelperMockRecorder) PasswordHashing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PasswordHashing", reflect.TypeOf((*MockHelper)(nil).PasswordHashing), arg0)
}

// SendMailToPhone mocks base method.
func (m *MockHelper) SendMailToPhone(To, Subject, Msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMailToPhone", To, Subject, Msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMailToPhone indicates an expected call of SendMailToPhone.
func (mr *MockHelperMockRecorder) SendMailToPhone(To, Subject, Msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMailToPhone", reflect.TypeOf((*MockHelper)(nil).SendMailToPhone), To, Subject, Msg)
}

// TwilioSendOTP mocks base method.
func (m *MockHelper) TwilioSendOTP(phoneNo, serviceSID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioSendOTP", phoneNo, serviceSID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TwilioSendOTP indicates an expected call of TwilioSendOTP.
func (mr *MockHelperMockRecorder) TwilioSendOTP(phoneNo, serviceSID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSendOTP", reflect.TypeOf((*MockHelper)(nil).TwilioSendOTP), phoneNo, serviceSID)
}

// TwilioSetup mocks base method.
func (m *MockHelper) TwilioSetup(accountSID, authToken string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TwilioSetup", accountSID, authToken)
}

// TwilioSetup indicates an expected call of TwilioSetup.
func (mr *MockHelperMockRecorder) TwilioSetup(accountSID, authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioSetup", reflect.TypeOf((*MockHelper)(nil).TwilioSetup), accountSID, authToken)
}

// TwilioVerifyOTP mocks base method.
func (m *MockHelper) TwilioVerifyOTP(serviceSID, code, phoneNo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwilioVerifyOTP", serviceSID, code, phoneNo)
	ret0, _ := ret[0].(error)
	return ret0
}

// TwilioVerifyOTP indicates an expected call of TwilioVerifyOTP.
func (mr *MockHelperMockRecorder) TwilioVerifyOTP(serviceSID, code, phoneNo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwilioVerifyOTP", reflect.TypeOf((*MockHelper)(nil).TwilioVerifyOTP), serviceSID, code, phoneNo)
}
