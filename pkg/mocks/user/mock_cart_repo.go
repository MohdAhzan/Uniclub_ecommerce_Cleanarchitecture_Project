// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repository/interface/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "project/pkg/utils/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// AddtoCartItems mocks base method.
func (m *MockCartRepository) AddtoCartItems(cartId, pid, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddtoCartItems", cartId, pid, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddtoCartItems indicates an expected call of AddtoCartItems.
func (mr *MockCartRepositoryMockRecorder) AddtoCartItems(cartId, pid, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddtoCartItems", reflect.TypeOf((*MockCartRepository)(nil).AddtoCartItems), cartId, pid, quantity)
}

// CheckIfItemIsAlreadyAdded mocks base method.
func (m *MockCartRepository) CheckIfItemIsAlreadyAdded(cartID, pid int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfItemIsAlreadyAdded", cartID, pid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfItemIsAlreadyAdded indicates an expected call of CheckIfItemIsAlreadyAdded.
func (mr *MockCartRepositoryMockRecorder) CheckIfItemIsAlreadyAdded(cartID, pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfItemIsAlreadyAdded", reflect.TypeOf((*MockCartRepository)(nil).CheckIfItemIsAlreadyAdded), cartID, pid)
}

// CreateNewCart mocks base method.
func (m *MockCartRepository) CreateNewCart(UserID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCart", UserID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewCart indicates an expected call of CreateNewCart.
func (mr *MockCartRepositoryMockRecorder) CreateNewCart(UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCart", reflect.TypeOf((*MockCartRepository)(nil).CreateNewCart), UserID)
}

// FindCartQuantity mocks base method.
func (m *MockCartRepository) FindCartQuantity(pid, cartID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCartQuantity", pid, cartID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCartQuantity indicates an expected call of FindCartQuantity.
func (mr *MockCartRepositoryMockRecorder) FindCartQuantity(pid, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCartQuantity", reflect.TypeOf((*MockCartRepository)(nil).FindCartQuantity), pid, cartID)
}

// GetCartAddress mocks base method.
func (m *MockCartRepository) GetCartAddress(userID int) (models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartAddress", userID)
	ret0, _ := ret[0].(models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartAddress indicates an expected call of GetCartAddress.
func (mr *MockCartRepositoryMockRecorder) GetCartAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartAddress", reflect.TypeOf((*MockCartRepository)(nil).GetCartAddress), userID)
}

// GetCartID mocks base method.
func (m *MockCartRepository) GetCartID(userID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartID", userID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartID indicates an expected call of GetCartID.
func (mr *MockCartRepositoryMockRecorder) GetCartID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartID", reflect.TypeOf((*MockCartRepository)(nil).GetCartID), userID)
}

// GetProductIDs mocks base method.
func (m *MockCartRepository) GetProductIDs(cardTD int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductIDs", cardTD)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductIDs indicates an expected call of GetProductIDs.
func (mr *MockCartRepositoryMockRecorder) GetProductIDs(cardTD interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductIDs", reflect.TypeOf((*MockCartRepository)(nil).GetProductIDs), cardTD)
}

// GetProductNames mocks base method.
func (m *MockCartRepository) GetProductNames(pID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductNames", pID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductNames indicates an expected call of GetProductNames.
func (mr *MockCartRepositoryMockRecorder) GetProductNames(pID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductNames", reflect.TypeOf((*MockCartRepository)(nil).GetProductNames), pID)
}

// RemoveCartItems mocks base method.
func (m *MockCartRepository) RemoveCartItems(pid, cartID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCartItems", pid, cartID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCartItems indicates an expected call of RemoveCartItems.
func (mr *MockCartRepositoryMockRecorder) RemoveCartItems(pid, cartID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCartItems", reflect.TypeOf((*MockCartRepository)(nil).RemoveCartItems), pid, cartID)
}

// UpdateCartQuantity mocks base method.
func (m *MockCartRepository) UpdateCartQuantity(cartID, pid, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCartQuantity", cartID, pid, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCartQuantity indicates an expected call of UpdateCartQuantity.
func (mr *MockCartRepositoryMockRecorder) UpdateCartQuantity(cartID, pid, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCartQuantity", reflect.TypeOf((*MockCartRepository)(nil).UpdateCartQuantity), cartID, pid, quantity)
}
